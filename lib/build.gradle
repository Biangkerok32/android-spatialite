apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.sevar83'
version = '1.0.7'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            //consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // This tricks Gradle that there is no native source code to build,
    // so we can build it with our custom task "ndkBuild"
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDir 'build/libs'
        }
    }

    externalNativeBuild{
        ndkBuild{
            path "src/main/jni/Android.mk"
        }
    }

    defaultConfig {
        externalNativeBuild {
            ndkBuild {
                //targets "target1", "target2"
                arguments "NDK_APPLICATION_MK:=src/main/jni/Application.mk", "-j", "8", "NDK_DEBUG=1", "V=1"
                abiFilters "x86", "armeabi-v7a", "armeabi"
            }
        }
    }
}

// Howto "Using custom Android.mk with Gradle/Android Studio"
// http://blog.gaku.net/ndk/
// http://blog.gaku.net/including-ndk-produced-so-file-into-apk/
// https://github.com/twitter-university/FibonacciNativeProject/tree/master/FibonacciNative
// http://ph0b.com/android-studio-gradle-and-ndk-integration/
// https://github.com/googlesamples/android-ndk/issues/243#issuecomment-229697996
/*task ndkBuild(type: Exec, description: 'Compile JNI sources via NDK') {
    commandLine 'ndk-build',
            'V=1',
            '-j', Runtime.runtime.availableProcessors(),
            'NDK_DEBUG=1',
            'NDK_PROJECT_PATH=build',
            'NDK_APPLICATION_MK=src/main/jni/Application.mk',
            'APP_BUILD_SCRIPT=src/main/jni/Android.mk'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}*/

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:25.2.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}
